name: Production CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  COVERAGE_THRESHOLD: 50

jobs:
  # Security and Code Quality Gate
  security-audit:
    name: Security & Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: npm audit --audit-level=high
        continue-on-error: false
      
      - name: Check for known vulnerabilities
        run: |
          npm audit --json > audit-results.json || true
          HIGH_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          
          echo "High vulnerabilities: $HIGH_VULNS"
          echo "Critical vulnerabilities: $CRITICAL_VULNS"
          
          if [ $CRITICAL_VULNS -gt 0 ]; then
            echo "‚ùå Critical vulnerabilities found. Blocking deployment."
            exit 1
          fi
          
          if [ $HIGH_VULNS -gt 5 ]; then
            echo "‚ö†Ô∏è Too many high-severity vulnerabilities ($HIGH_VULNS). Consider addressing them."
            exit 1
          fi
          
          echo "‚úÖ Security audit passed"

  # Code Quality Gate
  code-quality:
    name: Code Quality & Type Safety
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TypeScript compiler
        run: npx tsc --noEmit
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Check for TODO/FIXME comments
        run: |
          TODO_COUNT=$(grep -r "TODO\|FIXME" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules . | wc -l)
          echo "Found $TODO_COUNT TODO/FIXME comments"
          if [ $TODO_COUNT -gt 10 ]; then
            echo "‚ö†Ô∏è High number of TODO/FIXME comments ($TODO_COUNT). Consider addressing them."
          fi

  # Unit Tests with Coverage
  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: [security-audit, code-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests with coverage
        run: npm run test:unit:coverage
        continue-on-error: false
      
      - name: Check coverage thresholds
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            node -e "
            const coverage = require('./coverage/coverage-summary.json');
            const total = coverage.total;
            const threshold = ${{ env.COVERAGE_THRESHOLD }};
            let failed = false;
            
            console.log('Coverage Summary:');
            console.log('================');
            for (const metric of ['statements', 'branches', 'functions', 'lines']) {
              const pct = total[metric].pct;
              const status = pct >= threshold ? '‚úÖ' : '‚ùå';
              console.log(\`\${status} \${metric}: \${pct.toFixed(2)}% (threshold: \${threshold}%)\`);
              if (pct < threshold) failed = true;
            }
            
            if (failed) {
              console.error('\\n‚ùå Coverage thresholds not met!');
              process.exit(1);
            } else {
              console.log('\\n‚úÖ All coverage thresholds met!');
            }
            "
          else
            echo "‚ùå Coverage report not found!"
            exit 1
          fi
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vitest-coverage-report
          path: coverage/
          retention-days: 30
      
      - name: Comment coverage on PR
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          message: |
            ## üìä Test Coverage Report
            
            Coverage report has been generated and uploaded as an artifact.
            
            **Threshold**: ${{ env.COVERAGE_THRESHOLD }}% for all metrics
            ‚úÖ Coverage check passed!

  # Build and Bundle Analysis
  build-analysis:
    name: Build & Bundle Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: postgresql://user:pass@localhost:5432/test
          DATABASE_URL_UNPOOLED: postgresql://user:pass@localhost:5432/test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-key-for-ci-build-analysis
          EMAIL_SERVER_HOST: smtp.example.com
          EMAIL_SERVER_PORT: 587
          EMAIL_SERVER_USER: test@example.com
          EMAIL_SERVER_PASSWORD: test-password
          EMAIL_FROM: noreply@example.com
          RESEND_API_KEY: re_test_key
      
      - name: Analyze bundle size
        run: |
          # Find the largest routes and check bundle sizes
          find .next/static/chunks -name "*.js" -exec ls -la {} \; | sort -k5 -nr | head -10
          
          # Check for excessively large pages (> 200KB threshold)
          LARGE_PAGES=$(find .next/static/chunks/pages -name "*.js" -size +200k 2>/dev/null || true)
          if [ ! -z "$LARGE_PAGES" ]; then
            echo "‚ö†Ô∏è Large page bundles detected:"
            echo "$LARGE_PAGES"
            echo "Consider code splitting or optimization"
          fi
          
          echo "‚úÖ Bundle analysis completed"
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .next/
          retention-days: 7

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests & Integration
    runs-on: ubuntu-latest
    needs: [build-analysis]
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: |
          npx playwright install --with-deps chromium
          npx playwright install-deps
      
      - name: Setup database
        run: |
          npm run db:push
          npm run db:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          DATABASE_URL_UNPOOLED: postgresql://postgres:postgres@localhost:5432/test
      
      - name: Run Playwright tests
        run: npm run test:e2e:ci
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          DATABASE_URL_UNPOOLED: postgresql://postgres:postgres@localhost:5432/test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-key-for-ci-e2e
          EMAIL_SERVER_HOST: smtp.example.com
          EMAIL_SERVER_PORT: 587
          EMAIL_SERVER_USER: test@example.com
          EMAIL_SERVER_PASSWORD: test-password
          EMAIL_FROM: noreply@example.com
          RESEND_API_KEY: re_test_key
      
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
      
      - name: Upload Playwright test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results
          path: test-results/
          retention-days: 30

  # Performance & Load Testing
  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup database
        run: |
          npm run db:push
          npm run db:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          DATABASE_URL_UNPOOLED: postgresql://postgres:postgres@localhost:5432/test
      
      - name: Start application
        run: |
          npm run build
          npm run start &
          sleep 30
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          DATABASE_URL_UNPOOLED: postgresql://postgres:postgres@localhost:5432/test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-key-for-perf
          EMAIL_SERVER_HOST: smtp.example.com
          EMAIL_SERVER_PORT: 587
          EMAIL_SERVER_USER: test@example.com
          EMAIL_SERVER_PASSWORD: test-password
          EMAIL_FROM: noreply@example.com
          RESEND_API_KEY: re_test_key
      
      - name: Run load tests
        run: |
          if [ -f tests/load/artillery.yml ]; then
            npm run test:load || echo "Load tests failed but not blocking"
          else
            echo "No load test configuration found, skipping"
          fi
      
      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/dashboard
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3

  # Deployment Gates
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [performance-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.preview-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Vercel Staging
        uses: amondnet/vercel-action@v25
        id: deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--env DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }} --env DATABASE_URL_UNPOOLED=${{ secrets.STAGING_DATABASE_URL_UNPOOLED }}'
          scope: ${{ secrets.VERCEL_ORG_ID }}
      
      - name: Run staging smoke tests
        run: |
          sleep 60  # Wait for deployment to stabilize
          curl -f ${{ steps.deploy.outputs.preview-url }}/api/health || exit 1
          echo "‚úÖ Staging deployment healthy"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [performance-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.preview-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        id: deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --env DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }} --env DATABASE_URL_UNPOOLED=${{ secrets.PRODUCTION_DATABASE_URL_UNPOOLED }}'
          scope: ${{ secrets.VERCEL_ORG_ID }}
      
      - name: Run production smoke tests
        run: |
          sleep 60  # Wait for deployment to stabilize
          curl -f ${{ steps.deploy.outputs.preview-url }}/api/health || exit 1
          echo "‚úÖ Production deployment healthy"
      
      - name: Post-deployment notifications
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üöÄ Production deployment successful!"
            echo "URL: ${{ steps.deploy.outputs.preview-url }}"
          else
            echo "‚ùå Production deployment failed!"
          fi