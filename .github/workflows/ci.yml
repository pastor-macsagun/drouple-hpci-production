name: Production CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  COVERAGE_THRESHOLD: 50

jobs:
  # Security and Code Quality Gate
  security-audit:
    name: Security & Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: npm audit --audit-level=high
        continue-on-error: false
      
      - name: Check for known vulnerabilities
        run: |
          npm audit --json > audit-results.json || true
          HIGH_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          
          echo "High vulnerabilities: $HIGH_VULNS"
          echo "Critical vulnerabilities: $CRITICAL_VULNS"
          
          if [ $CRITICAL_VULNS -gt 0 ]; then
            echo "‚ùå Critical vulnerabilities found. Blocking deployment."
            exit 1
          fi
          
          if [ $HIGH_VULNS -gt 5 ]; then
            echo "‚ö†Ô∏è Too many high-severity vulnerabilities ($HIGH_VULNS). Consider addressing them."
            exit 1
          fi
          
          echo "‚úÖ Security audit passed"

  # Code Quality Gate
  code-quality:
    name: Code Quality & Type Safety
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TypeScript compiler
        run: npx tsc --noEmit
      
      - name: Run ESLint
        run: npm run lint
      
      - name: API Migration Guardrails - Legacy Path Check
        run: |
          echo "üîç Checking for unintended legacy /api/mobile/v1 usage..."
          
          # Check core web app files (should have zero legacy references)
          WEB_LEGACY=$(find app lib components -name "*.ts" -o -name "*.tsx" | xargs grep -n "/api/mobile/v1" 2>/dev/null | grep -v "adapters\|middleware" | wc -l)
          
          if [ $WEB_LEGACY -gt 0 ]; then
            echo "‚ùå Found $WEB_LEGACY unintended /api/mobile/v1 references in web app files!"
            find app lib components -name "*.ts" -o -name "*.tsx" | xargs grep -n "/api/mobile/v1" 2>/dev/null | grep -v "adapters\|middleware"
            exit 1
          fi
          
          # Check mobile app critical paths (auth, events, checkins must use /api/v1)
          MOBILE_AUTH_LEGACY=$(find drouple-mobile -name "*.ts" -o -name "*.tsx" | xargs grep -n "/api/mobile/v1/auth" 2>/dev/null | wc -l)
          MOBILE_EVENTS_LEGACY=$(find drouple-mobile -name "*.ts" -o -name "*.tsx" | xargs grep -n "/api/mobile/v1/events" 2>/dev/null | wc -l) 
          MOBILE_CHECKIN_LEGACY=$(find drouple-mobile -name "*.ts" -o -name "*.tsx" | xargs grep -n "/api/mobile/v1/checkin" 2>/dev/null | wc -l)
          
          if [ $MOBILE_AUTH_LEGACY -gt 0 ] || [ $MOBILE_EVENTS_LEGACY -gt 0 ] || [ $MOBILE_CHECKIN_LEGACY -gt 0 ]; then
            echo "‚ùå Critical mobile endpoints still using legacy paths!"
            echo "Auth legacy refs: $MOBILE_AUTH_LEGACY (must be 0)"
            echo "Events legacy refs: $MOBILE_EVENTS_LEGACY (must be 0)" 
            echo "Checkin legacy refs: $MOBILE_CHECKIN_LEGACY (must be 0)"
            exit 1
          fi
          
          echo "‚úÖ API migration guardrails passed - no unintended legacy usage"
      
      - name: OpenAPI Specification Validation
        run: |
          echo "üîç Validating OpenAPI specification..."
          
          if [ ! -f "openapi/drouple.v1.yaml" ]; then
            echo "‚ùå OpenAPI specification not found at openapi/drouple.v1.yaml"
            exit 1
          fi
          
          # Install OpenAPI tools if not present
          npm install -g @apidevtools/swagger-parser || echo "Parser already installed"
          
          # Validate OpenAPI spec syntax
          swagger-parser validate openapi/drouple.v1.yaml
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ OpenAPI specification is valid"
          else
            echo "‚ùå OpenAPI specification validation failed"
            exit 1
          fi
      
      - name: Check for TODO/FIXME comments
        run: |
          TODO_COUNT=$(grep -r "TODO\|FIXME" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules . | wc -l)
          echo "Found $TODO_COUNT TODO/FIXME comments"
          if [ $TODO_COUNT -gt 10 ]; then
            echo "‚ö†Ô∏è High number of TODO/FIXME comments ($TODO_COUNT). Consider addressing them."
          fi

  # Unit Tests with Coverage
  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: [security-audit, code-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests with coverage
        run: npm run test:unit:coverage
        continue-on-error: false
      
      - name: Check coverage thresholds
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            node -e "
            const coverage = require('./coverage/coverage-summary.json');
            const total = coverage.total;
            const threshold = ${{ env.COVERAGE_THRESHOLD }};
            let failed = false;
            
            console.log('Coverage Summary:');
            console.log('================');
            for (const metric of ['statements', 'branches', 'functions', 'lines']) {
              const pct = total[metric].pct;
              const status = pct >= threshold ? '‚úÖ' : '‚ùå';
              console.log(\`\${status} \${metric}: \${pct.toFixed(2)}% (threshold: \${threshold}%)\`);
              if (pct < threshold) failed = true;
            }
            
            if (failed) {
              console.error('\\n‚ùå Coverage thresholds not met!');
              process.exit(1);
            } else {
              console.log('\\n‚úÖ All coverage thresholds met!');
            }
            "
          else
            echo "‚ùå Coverage report not found!"
            exit 1
          fi
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vitest-coverage-report
          path: coverage/
          retention-days: 30
      
      - name: Comment coverage on PR
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          message: |
            ## üìä Test Coverage Report
            
            Coverage report has been generated and uploaded as an artifact.
            
            **Threshold**: ${{ env.COVERAGE_THRESHOLD }}% for all metrics
            ‚úÖ Coverage check passed!

  # Build and Bundle Analysis
  build-analysis:
    name: Build & Bundle Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: postgresql://user:pass@localhost:5432/test
          DATABASE_URL_UNPOOLED: postgresql://user:pass@localhost:5432/test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-key-for-ci-build-analysis
          EMAIL_SERVER_HOST: smtp.example.com
          EMAIL_SERVER_PORT: 587
          EMAIL_SERVER_USER: test@example.com
          EMAIL_SERVER_PASSWORD: test-password
          EMAIL_FROM: noreply@example.com
          RESEND_API_KEY: re_test_key
      
      - name: Analyze bundle size
        run: |
          # Find the largest routes and check bundle sizes
          find .next/static/chunks -name "*.js" -exec ls -la {} \; | sort -k5 -nr | head -10
          
          # Check for excessively large pages (> 200KB threshold)
          LARGE_PAGES=$(find .next/static/chunks/pages -name "*.js" -size +200k 2>/dev/null || true)
          if [ ! -z "$LARGE_PAGES" ]; then
            echo "‚ö†Ô∏è Large page bundles detected:"
            echo "$LARGE_PAGES"
            echo "Consider code splitting or optimization"
          fi
          
          echo "‚úÖ Bundle analysis completed"
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .next/
          retention-days: 7

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests & Integration
    runs-on: ubuntu-latest
    needs: [build-analysis]
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: |
          npx playwright install --with-deps chromium
          npx playwright install-deps
      
      - name: Setup database
        run: |
          npm run db:push
          npm run db:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          DATABASE_URL_UNPOOLED: postgresql://postgres:postgres@localhost:5432/test
      
      - name: Contract & Adapter Parity Tests
        run: |
          echo "üîç Testing API contract and adapter parity..."
          
          # Start the application for API testing
          npm run build
          npm run start &
          APP_PID=$!
          sleep 30
          
          # Test critical endpoint parity
          echo "Testing /api/v1/auth/login endpoint..."
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/v1/auth/login)
          if [ "$STATUS" -ne 405 ] && [ "$STATUS" -ne 200 ]; then
            echo "‚ùå /api/v1/auth/login endpoint not responding correctly (status: $STATUS)"
            kill $APP_PID
            exit 1
          fi
          
          echo "Testing deprecated adapter /api/mobile/v1/auth/login..."
          ADAPTER_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/mobile/v1/auth/login)
          if [ "$ADAPTER_STATUS" -ne 405 ] && [ "$ADAPTER_STATUS" -ne 200 ]; then
            echo "‚ùå Deprecated adapter not working (status: $ADAPTER_STATUS)"
            kill $APP_PID
            exit 1
          fi
          
          # Test deprecation headers
          HEADERS=$(curl -s -I http://localhost:3000/api/mobile/v1/auth/login | grep -i "deprecation\|sunset\|warning\|link")
          if [ -z "$HEADERS" ]; then
            echo "‚ö†Ô∏è Deprecation headers missing from adapter"
          else
            echo "‚úÖ Deprecation headers present"
          fi
          
          kill $APP_PID
          echo "‚úÖ Contract & adapter parity tests passed"
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          DATABASE_URL_UNPOOLED: postgresql://postgres:postgres@localhost:5432/test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-key-for-parity
          EMAIL_SERVER_HOST: smtp.example.com
          EMAIL_SERVER_PORT: 587
          EMAIL_SERVER_USER: test@example.com
          EMAIL_SERVER_PASSWORD: test-password
          EMAIL_FROM: noreply@example.com
          RESEND_API_KEY: re_test_key
      
      - name: Run Playwright tests
        run: npm run test:e2e:ci
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          DATABASE_URL_UNPOOLED: postgresql://postgres:postgres@localhost:5432/test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-key-for-ci-e2e
          EMAIL_SERVER_HOST: smtp.example.com
          EMAIL_SERVER_PORT: 587
          EMAIL_SERVER_USER: test@example.com
          EMAIL_SERVER_PASSWORD: test-password
          EMAIL_FROM: noreply@example.com
          RESEND_API_KEY: re_test_key
      
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
      
      - name: Upload Playwright test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results
          path: test-results/
          retention-days: 30

  # Performance & Load Testing
  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup database
        run: |
          npm run db:push
          npm run db:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          DATABASE_URL_UNPOOLED: postgresql://postgres:postgres@localhost:5432/test
      
      - name: Start application
        run: |
          npm run build
          npm run start &
          sleep 30
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          DATABASE_URL_UNPOOLED: postgresql://postgres:postgres@localhost:5432/test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-key-for-perf
          EMAIL_SERVER_HOST: smtp.example.com
          EMAIL_SERVER_PORT: 587
          EMAIL_SERVER_USER: test@example.com
          EMAIL_SERVER_PASSWORD: test-password
          EMAIL_FROM: noreply@example.com
          RESEND_API_KEY: re_test_key
      
      - name: Run load tests
        run: |
          if [ -f tests/load/artillery.yml ]; then
            npm run test:load || echo "Load tests failed but not blocking"
          else
            echo "No load test configuration found, skipping"
          fi
      
      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/dashboard
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3

  # Note: Deployment is handled automatically by Vercel's GitHub integration
  # When pushing to main branch, Vercel will automatically deploy to production
  # Analytics and Speed Insights are integrated via components in app/layout.tsx
  # Use `npm run deploy` for manual deployment via Vercel CLI if needed
  
  deployment-notification:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [performance-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify deployment readiness
        run: |
          echo "üöÄ All quality gates passed!"
          echo "‚úÖ Security audit completed"
          echo "‚úÖ Code quality validated"
          echo "‚úÖ Unit tests passed with coverage"
          echo "‚úÖ Build analysis completed"
          echo "‚úÖ E2E tests passed"
          echo "‚úÖ Performance tests completed"
          echo ""
          echo "üîÑ Vercel will automatically deploy to production"
          echo "üìä Analytics and Speed Insights are active"
          echo "üåê Production URL: https://www.drouple.app"