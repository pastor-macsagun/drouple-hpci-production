openapi: 3.0.3
info:
  title: Drouple Unified API
  version: 1.0.0
  description: Unified API for both Web and Mobile clients
  contact:
    name: Drouple API Team
    email: api@drouple.com
servers:
  - url: https://api.drouple.com/api/v1
    description: Production server
  - url: https://api-staging.drouple.com/api/v1
    description: Staging server
  - url: http://localhost:3000/api/v1
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      required: [ok, code, message]
      properties:
        ok:
          type: boolean
          example: false
        code:
          type: string
          example: "UNAUTHORIZED"
        message:
          type: string
          example: "Invalid or expired token"
        data:
          type: object
          nullable: true
        meta:
          type: object
          properties:
            traceId:
              type: string
              example: "abc123"
    
    User:
      type: object
      required: [id, email, name, role, tenantId]
      properties:
        id:
          type: string
          example: "user_123"
        email:
          type: string
          format: email
          example: "user@drouple.com"
        name:
          type: string
          example: "John Doe"
        role:
          type: string
          enum: [SUPER_ADMIN, CHURCH_ADMIN, VIP, LEADER, MEMBER]
          example: "MEMBER"
        tenantId:
          type: string
          example: "tenant_123"
        churchId:
          type: string
          nullable: true
          example: "church_123"
    
    Event:
      type: object
      required: [id, title, description, startDate, endDate, capacity]
      properties:
        id:
          type: string
          example: "event_123"
        title:
          type: string
          example: "Sunday Service"
        description:
          type: string
          example: "Weekly Sunday service"
        startDate:
          type: string
          format: date-time
          example: "2025-01-01T10:00:00Z"
        endDate:
          type: string
          format: date-time
          example: "2025-01-01T12:00:00Z"
        capacity:
          type: integer
          example: 100
        currentAttendees:
          type: integer
          example: 50
        rsvpStatus:
          type: string
          enum: [ATTENDING, NOT_ATTENDING, WAITLIST, null]
          nullable: true
          example: "ATTENDING"
    
    CheckIn:
      type: object
      required: [id, userId, serviceId, timestamp]
      properties:
        id:
          type: string
          example: "checkin_123"
        userId:
          type: string
          example: "user_123"
        serviceId:
          type: string
          example: "service_123"
        timestamp:
          type: string
          format: date-time
          example: "2025-01-01T10:00:00Z"
        newBeliever:
          type: boolean
          default: false
          example: false

security:
  - BearerAuth: []

paths:
  /auth/login:
    post:
      tags: [Authentication]
      summary: Login user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: "user@drouple.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  code:
                    type: string
                    example: "LOGIN_SUCCESS"
                  message:
                    type: string
                    example: "Login successful"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      accessToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refreshToken:
                        type: string
                        example: "refresh_token_here"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Refresh access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
                  example: "refresh_token_here"
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  code:
                    type: string
                    example: "TOKEN_REFRESHED"
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refreshToken:
                        type: string
                        example: "new_refresh_token_here"

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Logout user
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  code:
                    type: string
                    example: "LOGOUT_SUCCESS"

  /members/search:
    get:
      tags: [Members]
      summary: Search members
      parameters:
        - name: q
          in: query
          description: Search query
          schema:
            type: string
            example: "john"
        - name: limit
          in: query
          description: Max results to return
          schema:
            type: integer
            default: 20
            example: 20
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            default: 0
            example: 0
      responses:
        '200':
          description: Members found
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      members:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      total:
                        type: integer
                        example: 50

  /events:
    get:
      tags: [Events]
      summary: List events
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Events retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      events:
                        type: array
                        items:
                          $ref: '#/components/schemas/Event'
                      total:
                        type: integer
                        example: 25

  /events/{id}:
    get:
      tags: [Events]
      summary: Get event details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "event_123"
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      event:
                        $ref: '#/components/schemas/Event'

  /events/{id}/rsvp:
    post:
      tags: [Events]
      summary: RSVP to event
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "event_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [ATTENDING, NOT_ATTENDING]
                  example: "ATTENDING"
      responses:
        '200':
          description: RSVP successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  code:
                    type: string
                    example: "RSVP_SUCCESS"

  /checkins:
    post:
      tags: [Check-ins]
      summary: Create check-in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [serviceId]
              properties:
                serviceId:
                  type: string
                  example: "service_123"
                newBeliever:
                  type: boolean
                  default: false
                  example: false
      responses:
        '201':
          description: Check-in created
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      checkin:
                        $ref: '#/components/schemas/CheckIn'

  /checkins/bulk:
    post:
      tags: [Check-ins]
      summary: Bulk create check-ins (for offline sync)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [checkins]
              properties:
                checkins:
                  type: array
                  items:
                    type: object
                    required: [serviceId, timestamp]
                    properties:
                      serviceId:
                        type: string
                        example: "service_123"
                      timestamp:
                        type: string
                        format: date-time
                        example: "2025-01-01T10:00:00Z"
                      newBeliever:
                        type: boolean
                        default: false
      responses:
        '201':
          description: Bulk check-ins created
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      created:
                        type: integer
                        example: 5
                      failed:
                        type: integer
                        example: 0

  /sync/members:
    get:
      tags: [Sync]
      summary: Get members delta sync
      parameters:
        - name: updatedAfter
          in: query
          required: true
          schema:
            type: string
            format: date-time
            example: "2025-01-01T00:00:00Z"
      responses:
        '200':
          description: Members delta
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      members:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      lastSync:
                        type: string
                        format: date-time
                        example: "2025-01-01T12:00:00Z"

  /sync/events:
    get:
      tags: [Sync]
      summary: Get events delta sync
      parameters:
        - name: updatedAfter
          in: query
          required: true
          schema:
            type: string
            format: date-time
            example: "2025-01-01T00:00:00Z"
      responses:
        '200':
          description: Events delta
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      events:
                        type: array
                        items:
                          $ref: '#/components/schemas/Event'
                      lastSync:
                        type: string
                        format: date-time
                        example: "2025-01-01T12:00:00Z"

  /devices:
    post:
      tags: [Devices]
      summary: Register push notification device
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, platform]
              properties:
                token:
                  type: string
                  example: "expo_push_token_here"
                platform:
                  type: string
                  enum: [ios, android]
                  example: "ios"
      responses:
        '200':
          description: Device registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  code:
                    type: string
                    example: "DEVICE_REGISTERED"

  /live/service-counts:
    get:
      tags: [Live]
      summary: Get live service counts (realtime polling fallback)
      responses:
        '200':
          description: Service counts
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      counts:
                        type: object
                        example:
                          service_123: 45
                          service_456: 23
                      timestamp:
                        type: string
                        format: date-time
                        example: "2025-01-01T10:30:00Z"