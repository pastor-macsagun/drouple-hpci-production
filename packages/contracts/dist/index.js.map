{"version":3,"sources":["../src/client.ts"],"sourcesContent":["import type { paths, components } from './openapi.js';\n\nexport type ApiResponse<T = unknown> = {\n  ok: boolean;\n  code?: string;\n  message?: string;\n  data?: T;\n  meta?: {\n    traceId?: string;\n  };\n};\n\nexport type ApiError = ApiResponse & {\n  ok: false;\n  code: string;\n  message: string;\n};\n\nexport type User = components['schemas']['User'];\nexport type Event = components['schemas']['Event'];\nexport type CheckIn = components['schemas']['CheckIn'];\n\nexport interface ApiClientConfig {\n  baseUrl: string;\n  timeout?: number;\n  defaultHeaders?: Record<string, string>;\n  getToken?: () => string | null;\n}\n\nexport class ApiClient {\n  private config: Required<ApiClientConfig>;\n\n  constructor(config: ApiClientConfig) {\n    this.config = {\n      timeout: 30000,\n      defaultHeaders: {},\n      getToken: () => null,\n      ...config,\n    };\n  }\n\n  private async request<T = unknown>(\n    path: string,\n    options: RequestInit = {}\n  ): Promise<ApiResponse<T>> {\n    const url = `${this.config.baseUrl}${path}`;\n    const token = this.config.getToken?.();\n    \n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      ...this.config.defaultHeaders,\n      ...(options.headers as Record<string, string>),\n    };\n\n    if (token) {\n      headers.Authorization = `Bearer ${token}`;\n    }\n\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), this.config.timeout);\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers,\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      let data: any;\n      try {\n        data = await response.json();\n      } catch {\n        data = { ok: false, code: 'INVALID_JSON', message: 'Invalid JSON response' };\n      }\n\n      if (!response.ok) {\n        return {\n          ok: false,\n          code: data.code || `HTTP_${response.status}`,\n          message: data.message || `HTTP ${response.status}`,\n          data: data.data,\n          meta: data.meta,\n        };\n      }\n\n      return data;\n    } catch (error) {\n      clearTimeout(timeoutId);\n      \n      if (error instanceof Error) {\n        if (error.name === 'AbortError') {\n          return {\n            ok: false,\n            code: 'TIMEOUT',\n            message: 'Request timeout',\n          };\n        }\n        \n        return {\n          ok: false,\n          code: 'NETWORK_ERROR',\n          message: error.message,\n        };\n      }\n\n      return {\n        ok: false,\n        code: 'UNKNOWN_ERROR',\n        message: 'An unknown error occurred',\n      };\n    }\n  }\n\n  // Authentication endpoints\n  async login(email: string, password: string) {\n    type LoginResponse = {\n      user: User;\n      accessToken: string;\n      refreshToken: string;\n    };\n\n    return this.request<LoginResponse>('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({ email, password }),\n    });\n  }\n\n  async refresh(refreshToken: string) {\n    type RefreshResponse = {\n      accessToken: string;\n      refreshToken: string;\n    };\n\n    return this.request<RefreshResponse>('/auth/refresh', {\n      method: 'POST',\n      body: JSON.stringify({ refreshToken }),\n    });\n  }\n\n  async logout() {\n    return this.request('/auth/logout', {\n      method: 'POST',\n    });\n  }\n\n  // Members endpoints\n  async searchMembers(query?: string, limit = 20, offset = 0) {\n    type MembersResponse = {\n      members: User[];\n      total: number;\n    };\n\n    const params = new URLSearchParams();\n    if (query) params.append('q', query);\n    params.append('limit', limit.toString());\n    params.append('offset', offset.toString());\n\n    return this.request<MembersResponse>(`/members/search?${params}`);\n  }\n\n  // Events endpoints\n  async getEvents(limit = 20, offset = 0) {\n    type EventsResponse = {\n      events: Event[];\n      total: number;\n    };\n\n    const params = new URLSearchParams();\n    params.append('limit', limit.toString());\n    params.append('offset', offset.toString());\n\n    return this.request<EventsResponse>(`/events?${params}`);\n  }\n\n  async getEvent(id: string) {\n    type EventResponse = {\n      event: Event;\n    };\n\n    return this.request<EventResponse>(`/events/${id}`);\n  }\n\n  async rsvpToEvent(id: string, status: 'ATTENDING' | 'NOT_ATTENDING') {\n    return this.request(`/events/${id}/rsvp`, {\n      method: 'POST',\n      body: JSON.stringify({ status }),\n    });\n  }\n\n  // Check-ins endpoints\n  async createCheckin(serviceId: string, newBeliever = false) {\n    type CheckinResponse = {\n      checkin: CheckIn;\n    };\n\n    return this.request<CheckinResponse>('/checkins', {\n      method: 'POST',\n      body: JSON.stringify({ serviceId, newBeliever }),\n    });\n  }\n\n  async bulkCreateCheckins(checkins: Array<{\n    serviceId: string;\n    timestamp: string;\n    newBeliever?: boolean;\n  }>) {\n    type BulkCheckinResponse = {\n      created: number;\n      failed: number;\n    };\n\n    return this.request<BulkCheckinResponse>('/checkins/bulk', {\n      method: 'POST',\n      body: JSON.stringify({ checkins }),\n    });\n  }\n\n  // Sync endpoints\n  async syncMembers(updatedAfter: string) {\n    type MembersSyncResponse = {\n      members: User[];\n      lastSync: string;\n    };\n\n    return this.request<MembersSyncResponse>(\n      `/sync/members?updatedAfter=${encodeURIComponent(updatedAfter)}`\n    );\n  }\n\n  async syncEvents(updatedAfter: string) {\n    type EventsSyncResponse = {\n      events: Event[];\n      lastSync: string;\n    };\n\n    return this.request<EventsSyncResponse>(\n      `/sync/events?updatedAfter=${encodeURIComponent(updatedAfter)}`\n    );\n  }\n\n  // Device registration\n  async registerDevice(token: string, platform: 'ios' | 'android') {\n    return this.request('/devices', {\n      method: 'POST',\n      body: JSON.stringify({ token, platform }),\n    });\n  }\n\n  // Live service counts (fallback for realtime)\n  async getLiveServiceCounts() {\n    type ServiceCountsResponse = {\n      counts: Record<string, number>;\n      timestamp: string;\n    };\n\n    return this.request<ServiceCountsResponse>('/live/service-counts');\n  }\n}\n\nexport function createApiClient(config: ApiClientConfig): ApiClient {\n  return new ApiClient(config);\n}"],"mappings":"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","names":[]}