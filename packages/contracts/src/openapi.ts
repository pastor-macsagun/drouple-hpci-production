/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: email
                         * @example user@drouple.com
                         */
                        email: string;
                        /**
                         * Format: password
                         * @example password123
                         */
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            ok?: boolean;
                            /** @example LOGIN_SUCCESS */
                            code?: string;
                            /** @example Login successful */
                            message?: string;
                            data?: {
                                user?: components["schemas"]["User"];
                                /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... */
                                accessToken?: string;
                                /** @example refresh_token_here */
                                refreshToken?: string;
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh access token */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example refresh_token_here */
                        refreshToken: string;
                    };
                };
            };
            responses: {
                /** @description Token refreshed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            ok?: boolean;
                            /** @example TOKEN_REFRESHED */
                            code?: string;
                            data?: {
                                /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... */
                                accessToken?: string;
                                /** @example new_refresh_token_here */
                                refreshToken?: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Logout successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            ok?: boolean;
                            /** @example LOGOUT_SUCCESS */
                            code?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/members/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search members */
        get: {
            parameters: {
                query?: {
                    /** @description Search query */
                    q?: string;
                    /** @description Max results to return */
                    limit?: number;
                    /** @description Number of results to skip */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Members found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            ok?: boolean;
                            data?: {
                                members?: components["schemas"]["User"][];
                                /** @example 50 */
                                total?: number;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List events */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Events retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            ok?: boolean;
                            data?: {
                                events?: components["schemas"]["Event"][];
                                /** @example 25 */
                                total?: number;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get event details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Event details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            ok?: boolean;
                            data?: {
                                event?: components["schemas"]["Event"];
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}/rsvp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** RSVP to event */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @example ATTENDING
                         * @enum {string}
                         */
                        status: "ATTENDING" | "NOT_ATTENDING";
                    };
                };
            };
            responses: {
                /** @description RSVP successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            ok?: boolean;
                            /** @example RSVP_SUCCESS */
                            code?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/checkins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create check-in */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example service_123 */
                        serviceId: string;
                        /**
                         * @default false
                         * @example false
                         */
                        newBeliever?: boolean;
                    };
                };
            };
            responses: {
                /** @description Check-in created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            ok?: boolean;
                            data?: {
                                checkin?: components["schemas"]["CheckIn"];
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/checkins/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bulk create check-ins (for offline sync) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        checkins: {
                            /** @example service_123 */
                            serviceId: string;
                            /**
                             * Format: date-time
                             * @example 2025-01-01T10:00:00Z
                             */
                            timestamp: string;
                            /** @default false */
                            newBeliever?: boolean;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Bulk check-ins created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            ok?: boolean;
                            data?: {
                                /** @example 5 */
                                created?: number;
                                /** @example 0 */
                                failed?: number;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get members delta sync */
        get: {
            parameters: {
                query: {
                    updatedAfter: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Members delta */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            ok?: boolean;
                            data?: {
                                members?: components["schemas"]["User"][];
                                /**
                                 * Format: date-time
                                 * @example 2025-01-01T12:00:00Z
                                 */
                                lastSync?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get events delta sync */
        get: {
            parameters: {
                query: {
                    updatedAfter: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Events delta */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            ok?: boolean;
                            data?: {
                                events?: components["schemas"]["Event"][];
                                /**
                                 * Format: date-time
                                 * @example 2025-01-01T12:00:00Z
                                 */
                                lastSync?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/devices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register push notification device */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example expo_push_token_here */
                        token: string;
                        /**
                         * @example ios
                         * @enum {string}
                         */
                        platform: "ios" | "android";
                    };
                };
            };
            responses: {
                /** @description Device registered */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            ok?: boolean;
                            /** @example DEVICE_REGISTERED */
                            code?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/live/service-counts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get live service counts (realtime polling fallback) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Service counts */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            ok?: boolean;
                            data?: {
                                /** @example {
                                 *       "service_123": 45,
                                 *       "service_456": 23
                                 *     } */
                                counts?: Record<string, never>;
                                /**
                                 * Format: date-time
                                 * @example 2025-01-01T10:30:00Z
                                 */
                                timestamp?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @example false */
            ok: boolean;
            /** @example UNAUTHORIZED */
            code: string;
            /** @example Invalid or expired token */
            message: string;
            data?: Record<string, never> | null;
            meta?: {
                /** @example abc123 */
                traceId?: string;
            };
        };
        User: {
            /** @example user_123 */
            id: string;
            /**
             * Format: email
             * @example user@drouple.com
             */
            email: string;
            /** @example John Doe */
            name: string;
            /**
             * @example MEMBER
             * @enum {string}
             */
            role: "SUPER_ADMIN" | "CHURCH_ADMIN" | "VIP" | "LEADER" | "MEMBER";
            /** @example tenant_123 */
            tenantId: string;
            /** @example church_123 */
            churchId?: string | null;
        };
        Event: {
            /** @example event_123 */
            id: string;
            /** @example Sunday Service */
            title: string;
            /** @example Weekly Sunday service */
            description: string;
            /**
             * Format: date-time
             * @example 2025-01-01T10:00:00Z
             */
            startDate: string;
            /**
             * Format: date-time
             * @example 2025-01-01T12:00:00Z
             */
            endDate: string;
            /** @example 100 */
            capacity: number;
            /** @example 50 */
            currentAttendees?: number;
            /**
             * @example ATTENDING
             * @enum {string|null}
             */
            rsvpStatus?: "ATTENDING" | "NOT_ATTENDING" | "WAITLIST" | null;
        };
        CheckIn: {
            /** @example checkin_123 */
            id: string;
            /** @example user_123 */
            userId: string;
            /** @example service_123 */
            serviceId: string;
            /**
             * Format: date-time
             * @example 2025-01-01T10:00:00Z
             */
            timestamp: string;
            /**
             * @default false
             * @example false
             */
            newBeliever: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
