/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/healthz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check endpoint */
        get: operations["getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Exchange credentials for JWT access token */
        post: operations["createToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user profile */
        get: operations["getMe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List members with pagination and filtering */
        get: operations["getMembers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/members/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get member by ID */
        get: operations["getMemberById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List events with pagination and filtering */
        get: operations["getEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get event by ID */
        get: operations["getEventById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}/rsvp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** RSVP to an event */
        post: operations["createEventRsvp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/attendance/checkin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check in member for attendance */
        post: operations["createAttendanceCheckin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/announcements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List announcements with pagination */
        get: operations["getAnnouncements"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Me: {
            /** @description User ID (CUID) */
            id: string;
            /**
             * Format: email
             * @description User's email address
             */
            email: string;
            /** @description User's first name */
            firstName: string;
            /** @description User's last name */
            lastName: string;
            /** @description User's roles in the system */
            roles: ("SUPER_ADMIN" | "CHURCH_ADMIN" | "VIP" | "LEADER" | "MEMBER")[];
            /** @description Tenant/Church ID (CUID) */
            tenantId: string;
            /** @description Name of user's church */
            churchName: string;
            /** @description Whether user account is active */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Last login timestamp (RFC3339 UTC)
             */
            lastLoginAt?: string | null;
            /**
             * Format: date-time
             * @description Account creation timestamp (RFC3339 UTC)
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp (RFC3339 UTC)
             */
            updatedAt: string;
        };
        Member: {
            /** @description Member ID (CUID) */
            id: string;
            /** @description Member's first name */
            firstName: string;
            /** @description Member's last name */
            lastName: string;
            /**
             * Format: email
             * @description Member's email address
             */
            email?: string | null;
            /** @description Member's phone number */
            phone?: string | null;
            /**
             * @description Member's role in the church
             * @enum {string}
             */
            role: "SUPER_ADMIN" | "CHURCH_ADMIN" | "VIP" | "LEADER" | "MEMBER";
            /** @description Whether member is active */
            isActive: boolean;
            /** @description Believer status for new converts */
            believerStatus?: ("ACTIVE" | "INACTIVE" | "COMPLETED") | null;
            /**
             * Format: date
             * @description Date member joined church (YYYY-MM-DD)
             */
            dateJoined?: string | null;
            /** @description Admin notes about member */
            notes?: string | null;
            /**
             * Format: date-time
             * @description Record creation timestamp (RFC3339 UTC)
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp (RFC3339 UTC)
             */
            updatedAt: string;
        };
        Event: {
            /** @description Event ID (CUID) */
            id: string;
            /** @description Event title */
            title: string;
            /** @description Event description */
            description?: string | null;
            /**
             * Format: date-time
             * @description Event start date and time (RFC3339 UTC)
             */
            startDate: string;
            /**
             * Format: date-time
             * @description Event end date and time (RFC3339 UTC)
             */
            endDate?: string | null;
            /** @description Event location */
            location?: string | null;
            /** @description Maximum number of attendees */
            capacity?: number | null;
            /** @description Event fee (if applicable) */
            fee?: number | null;
            /** @description Whether event is visible to all members */
            isPublic: boolean;
            /**
             * @description Event status
             * @enum {string}
             */
            status: "DRAFT" | "PUBLISHED" | "CANCELLED" | "COMPLETED";
            /** @description Current number of confirmed attendees */
            attendeeCount: number;
            /** @description Current number on waitlist */
            waitlistCount: number;
            /** @description Current user's RSVP status (if any) */
            myRsvp?: ("going" | "interested" | "not_going") | null;
            /**
             * Format: date-time
             * @description Record creation timestamp (RFC3339 UTC)
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp (RFC3339 UTC)
             */
            updatedAt: string;
        };
        Announcement: {
            /** @description Announcement ID (CUID) */
            id: string;
            /** @description Announcement title */
            title: string;
            /** @description Announcement content (markdown supported) */
            content: string;
            /**
             * @description Announcement priority level
             * @enum {string}
             */
            priority: "LOW" | "NORMAL" | "HIGH" | "URGENT";
            /**
             * Format: date-time
             * @description Publication timestamp (RFC3339 UTC)
             */
            publishedAt: string;
            /**
             * Format: date-time
             * @description Expiration timestamp (RFC3339 UTC)
             */
            expiresAt?: string | null;
            /** @description Whether announcement is currently active */
            isActive: boolean;
            /** @description Name of announcement author */
            authorName: string;
            /**
             * Format: date-time
             * @description Record creation timestamp (RFC3339 UTC)
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp (RFC3339 UTC)
             */
            updatedAt: string;
        };
        AttendanceCheckinRequest: {
            /** @description Member ID (CUID) */
            memberId: string;
            /** @description Event/Service ID (CUID) */
            eventId: string;
            /**
             * Format: date-time
             * @description When QR code was scanned (RFC3339 UTC)
             */
            scannedAt: string;
            /** @description Unique device identifier */
            deviceId: string;
        };
        PageMeta: {
            /** @description Cursor for next page (null if last page) */
            nextCursor?: string | null;
            /** @description Whether there are more pages available */
            hasNextPage: boolean;
            /** @description Total number of items (if efficiently calculable) */
            totalCount?: number | null;
        };
        Error: {
            error: {
                /** @description Error code for programmatic handling */
                code: string;
                /** @description Human-readable error message */
                message: string;
                /** @description Additional error details (validation errors, etc.) */
                details?: Record<string, never> | null;
            };
        };
    };
    responses: {
        /** @description Bad Request - invalid input */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": {
                 *         "code": "VALIDATION_FAILED",
                 *         "message": "Request validation failed",
                 *         "details": {
                 *           "fieldErrors": {
                 *             "email": [
                 *               "must be a valid email address"
                 *             ]
                 *           }
                 *         }
                 *       }
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unauthorized - missing or invalid authentication */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": {
                 *         "code": "UNAUTHORIZED",
                 *         "message": "Authentication required"
                 *       }
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Forbidden - insufficient permissions */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": {
                 *         "code": "FORBIDDEN",
                 *         "message": "Insufficient permissions for this resource"
                 *       }
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Not Found - resource does not exist */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": {
                 *         "code": "NOT_FOUND",
                 *         "message": "Resource not found"
                 *       }
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Rate Limited - too many requests */
        RateLimited: {
            headers: {
                /** @description Request limit per window */
                "RateLimit-Limit"?: number;
                /** @description Requests remaining in current window */
                "RateLimit-Remaining"?: number;
                /** @description Unix timestamp when rate limit resets */
                "RateLimit-Reset"?: number;
                /** @description Seconds to wait before retrying */
                "Retry-After"?: number;
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": {
                 *         "code": "RATE_LIMITED",
                 *         "message": "Rate limit exceeded. Try again later."
                 *       }
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal Server Error */
        ServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": {
                 *         "code": "INTERNAL_ERROR",
                 *         "message": "An internal server error occurred"
                 *       }
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status: "healthy";
                        /**
                         * Format: date-time
                         * @description Current server time in RFC3339 UTC
                         */
                        timestamp: string;
                    };
                };
            };
        };
    };
    createToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: email
                     * @description User's email address
                     */
                    email: string;
                    /** @description User's password */
                    password: string;
                    /** @description Unique device identifier for mobile clients */
                    deviceId?: string;
                };
            };
        };
        responses: {
            /** @description Authentication successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description JWT access token (5-15 min TTL) */
                        accessToken: string;
                        /** @description Refresh token for token exchange */
                        refreshToken: string;
                        /** @description Token lifetime in seconds */
                        expiresIn: number;
                        user: components["schemas"]["Me"];
                    };
                };
            };
            401: components["responses"]["Unauthorized"];
            429: components["responses"]["RateLimited"];
            500: components["responses"]["ServerError"];
        };
    };
    getMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Current user profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Me"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["ServerError"];
        };
    };
    getMembers: {
        parameters: {
            query?: {
                /** @description Filter members updated since this timestamp (RFC3339 UTC) */
                updatedSince?: string;
                /** @description Search query for name or email */
                q?: string;
                /** @description Pagination cursor for next page */
                cursor?: string;
                /** @description Number of items per page */
                limit?: number;
            };
            header?: {
                /** @description ETag for cache validation */
                "If-None-Match"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of members */
            200: {
                headers: {
                    /** @description ETag for caching */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Member"][];
                        meta: components["schemas"]["PageMeta"];
                    };
                };
            };
            /** @description Not Modified - use cached response */
            304: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            429: components["responses"]["RateLimited"];
            500: components["responses"]["ServerError"];
        };
    };
    getMemberById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Member ID (CUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Member details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Member"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["ServerError"];
        };
    };
    getEvents: {
        parameters: {
            query?: {
                /** @description Filter events starting from this date (RFC3339 UTC) */
                since?: string;
                /** @description Search query for event title or description */
                q?: string;
                /** @description Pagination cursor for next page */
                cursor?: string;
                /** @description Number of items per page */
                limit?: number;
            };
            header?: {
                /** @description ETag for cache validation */
                "If-None-Match"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of events */
            200: {
                headers: {
                    /** @description ETag for caching */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Event"][];
                        meta: components["schemas"]["PageMeta"];
                    };
                };
            };
            /** @description Not Modified - use cached response */
            304: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            429: components["responses"]["RateLimited"];
            500: components["responses"]["ServerError"];
        };
    };
    getEventById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Event ID (CUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Event details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["ServerError"];
        };
    };
    createEventRsvp: {
        parameters: {
            query?: never;
            header: {
                /** @description UUID v4 for request deduplication (24h window) */
                "Idempotency-Key": string;
            };
            path: {
                /** @description Event ID (CUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description RSVP response type
                     * @enum {string}
                     */
                    response: "going" | "interested" | "not_going";
                };
            };
        };
        responses: {
            /** @description RSVP created or updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        rsvp: {
                            /** @description RSVP ID (CUID) */
                            id: string;
                            /** @description Event ID (CUID) */
                            eventId: string;
                            /** @description Member ID (CUID) */
                            memberId: string;
                            /** @enum {string} */
                            response: "going" | "interested" | "not_going";
                            /**
                             * Format: date-time
                             * @description RFC3339 UTC timestamp
                             */
                            createdAt: string;
                            /**
                             * Format: date-time
                             * @description RFC3339 UTC timestamp
                             */
                            updatedAt: string;
                        };
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            /** @description Conflict - duplicate request detected via Idempotency-Key */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            429: components["responses"]["RateLimited"];
            500: components["responses"]["ServerError"];
        };
    };
    createAttendanceCheckin: {
        parameters: {
            query?: never;
            header: {
                /** @description UUID v4 for request deduplication (24h window) */
                "Idempotency-Key": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AttendanceCheckinRequest"];
            };
        };
        responses: {
            /** @description Attendance check-in created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        checkin: {
                            /** @description Check-in ID (CUID) */
                            id: string;
                            /** @description Member ID (CUID) */
                            memberId: string;
                            /** @description Event/Service ID (CUID) */
                            eventId: string;
                            /**
                             * Format: date-time
                             * @description When QR was scanned (RFC3339 UTC)
                             */
                            scannedAt: string;
                            /** @description Device that performed scan */
                            deviceId: string;
                            /**
                             * Format: date-time
                             * @description Server timestamp (RFC3339 UTC)
                             */
                            createdAt: string;
                        };
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            /** @description Conflict - duplicate check-in or Idempotency-Key */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unprocessable Entity - validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            429: components["responses"]["RateLimited"];
            500: components["responses"]["ServerError"];
        };
    };
    getAnnouncements: {
        parameters: {
            query?: {
                /** @description Filter announcements published since this date (RFC3339 UTC) */
                since?: string;
                /** @description Pagination cursor for next page */
                cursor?: string;
                /** @description Number of items per page */
                limit?: number;
            };
            header?: {
                /** @description ETag for cache validation */
                "If-None-Match"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of announcements */
            200: {
                headers: {
                    /** @description ETag for caching */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Announcement"][];
                        meta: components["schemas"]["PageMeta"];
                    };
                };
            };
            /** @description Not Modified - use cached response */
            304: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            429: components["responses"]["RateLimited"];
            500: components["responses"]["ServerError"];
        };
    };
}
