generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  SUPER_ADMIN
  PASTOR
  ADMIN
  VIP
  LEADER
  MEMBER
}

enum ProfileVisibility {
  PUBLIC
  MEMBERS
  LEADERS
  PRIVATE
}

enum BelieverStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

enum MemberStatus {
  PENDING
  ACTIVE
  INACTIVE
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  emailVerified      DateTime?
  name               String?
  image              String?
  role               UserRole  @default(MEMBER)
  tenantId           String?
  isNewBeliever      Boolean   @default(false)
  
  // Authentication
  passwordHash       String?
  memberStatus       MemberStatus @default(PENDING)
  mustChangePassword Boolean   @default(true)
  
  // Profile fields
  phone              String?
  bio                String?   @db.Text
  dateOfBirth        DateTime?
  address            String?
  city               String?
  zipCode            String?
  emergencyContact   String?
  emergencyPhone     String?
  joinedAt           DateTime  @default(now())
  profileVisibility  ProfileVisibility @default(MEMBERS)
  allowContact       Boolean   @default(true)
  
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  accounts                 Account[]
  sessions                 Session[]
  memberships              Membership[]
  auditLogs                AuditLog[]
  checkins                 Checkin[]
  ledLifeGroups           LifeGroup[]              @relation("LifeGroupLeader")
  lifeGroupMemberships    LifeGroupMembership[]
  lifeGroupMemberRequests LifeGroupMemberRequest[]
  lifeGroupAttendances    LifeGroupAttendance[]
  eventRsvps              EventRsvp[]
  pathwayEnrollments      PathwayEnrollment[]
  pathwayProgress         PathwayProgress[]
  announcements           Announcement[]
  sentMessages            Message[]        @relation("SentMessages")
  receivedMessages        Message[]        @relation("ReceivedMessages")
  firstTimer              FirstTimer?      @relation("FirstTimerMember")
  assignedFirstTimers     FirstTimer[]     @relation("VipAssignments")

  @@index([tenantId])
  @@index([tenantId, role])
  @@index([email, tenantId])
  @@index([role])
  @@index([isNewBeliever])
  @@index([name])
  @@index([joinedAt])
  @@index([profileVisibility])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Church {
  id           String    @id @default(cuid())
  name         String    @unique
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  localChurches LocalChurch[]

  @@map("churches")
}

model LocalChurch {
  id          String    @id @default(cuid())
  name        String
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  phone       String?
  email       String?
  churchId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  church      Church       @relation(fields: [churchId], references: [id], onDelete: Cascade)
  memberships Membership[]
  auditLogs   AuditLog[]
  services    Service[]
  lifeGroups  LifeGroup[]
  events        Event[]
  announcements Announcement[]

  @@unique([churchId, name])
  @@index([churchId])
  @@map("local_churches")
}

model Membership {
  id            String          @id @default(cuid())
  userId        String
  localChurchId String
  role          UserRole        @default(MEMBER)
  isNewBeliever Boolean         @default(false)
  believerStatus BelieverStatus @default(ACTIVE)
  joinedAt      DateTime        @default(now())
  leftAt        DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  localChurch  LocalChurch  @relation(fields: [localChurchId], references: [id], onDelete: Cascade)

  @@unique([userId, localChurchId])
  @@index([localChurchId])
  @@index([localChurchId, role])
  @@index([believerStatus])
  @@map("memberships")
}

model AuditLog {
  id            String       @id @default(cuid())
  actorId       String
  action        String
  entity        String
  entityId      String
  localChurchId String?
  meta          Json?
  createdAt     DateTime     @default(now())

  actor        User          @relation(fields: [actorId], references: [id], onDelete: Cascade)
  localChurch  LocalChurch?  @relation(fields: [localChurchId], references: [id], onDelete: Cascade)

  @@index([actorId])
  @@index([entity, entityId])
  @@index([localChurchId])
  @@map("audit_logs")
}

model Service {
  id            String       @id @default(cuid())
  date          DateTime
  localChurchId String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  localChurch   LocalChurch  @relation(fields: [localChurchId], references: [id], onDelete: Cascade)
  checkins      Checkin[]

  @@unique([localChurchId, date])
  @@index([localChurchId])
  @@index([date])
  @@map("services")
}

model Checkin {
  id              String       @id @default(cuid())
  serviceId       String
  userId          String
  isNewBeliever   Boolean      @default(false)
  checkedInAt     DateTime     @default(now())

  service         Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([serviceId, userId])
  @@index([serviceId])
  @@index([userId])
  @@index([checkedInAt])
  @@map("checkins")
}

model LifeGroup {
  id            String       @id @default(cuid())
  name          String
  description   String?
  capacity      Int
  leaderId      String
  localChurchId String
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  leader           User                      @relation("LifeGroupLeader", fields: [leaderId], references: [id])
  localChurch      LocalChurch               @relation(fields: [localChurchId], references: [id], onDelete: Cascade)
  memberships      LifeGroupMembership[]
  memberRequests   LifeGroupMemberRequest[]
  attendanceSessions LifeGroupAttendanceSession[]

  @@unique([localChurchId, name])
  @@index([leaderId])
  @@index([localChurchId])
  @@map("life_groups")
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
  LEFT
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model LifeGroupMembership {
  id           String            @id @default(cuid())
  lifeGroupId  String
  userId       String
  status       MembershipStatus  @default(ACTIVE)
  joinedAt     DateTime          @default(now())
  leftAt       DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  lifeGroup    LifeGroup         @relation(fields: [lifeGroupId], references: [id], onDelete: Cascade)
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([lifeGroupId, userId])
  @@index([userId])
  @@index([lifeGroupId])
  @@map("life_group_memberships")
}

model LifeGroupMemberRequest {
  id           String        @id @default(cuid())
  lifeGroupId  String
  userId       String
  status       RequestStatus @default(PENDING)
  message      String?
  requestedAt  DateTime      @default(now())
  processedAt  DateTime?
  processedBy  String?

  lifeGroup    LifeGroup     @relation(fields: [lifeGroupId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([lifeGroupId, userId, status])
  @@index([userId])
  @@index([lifeGroupId])
  @@index([status])
  @@map("life_group_member_requests")
}

model LifeGroupAttendanceSession {
  id           String       @id @default(cuid())
  lifeGroupId  String
  date         DateTime
  notes        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  lifeGroup    LifeGroup    @relation(fields: [lifeGroupId], references: [id], onDelete: Cascade)
  attendances  LifeGroupAttendance[]

  @@unique([lifeGroupId, date])
  @@index([lifeGroupId])
  @@index([date])
  @@map("life_group_attendance_sessions")
}

model LifeGroupAttendance {
  id          String       @id @default(cuid())
  sessionId   String
  userId      String
  present     Boolean      @default(true)
  markedAt    DateTime     @default(now())

  session     LifeGroupAttendanceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId])
  @@index([sessionId])
  @@index([userId])
  @@map("life_group_attendances")
}

enum EventScope {
  LOCAL_CHURCH
  WHOLE_CHURCH
}

enum RsvpStatus {
  GOING
  WAITLIST
  CANCELLED
}

model Event {
  id            String       @id @default(cuid())
  name          String
  description   String?
  startDateTime DateTime
  endDateTime   DateTime
  location      String?
  capacity      Int
  scope         EventScope   @default(LOCAL_CHURCH)
  localChurchId String?
  requiresPayment Boolean    @default(false)
  feeAmount     Float?
  visibleToRoles UserRole[]  @default([])
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  localChurch   LocalChurch? @relation(fields: [localChurchId], references: [id], onDelete: Cascade)
  rsvps         EventRsvp[]

  @@index([localChurchId])
  @@index([startDateTime])
  @@index([scope])
  @@map("events")
}

model EventRsvp {
  id            String       @id @default(cuid())
  eventId       String
  userId        String
  status        RsvpStatus   @default(GOING)
  hasPaid       Boolean      @default(false)
  rsvpAt        DateTime     @default(now())
  cancelledAt   DateTime?
  updatedAt     DateTime     @updatedAt

  event         Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId, userId])
  @@index([eventId])
  @@index([userId])
  @@index([status])
  @@map("event_rsvps")
}

enum PathwayType {
  ROOTS
  VINES
  RETREAT
}

enum EnrollmentStatus {
  ENROLLED
  COMPLETED
  DROPPED
}

model Pathway {
  id            String       @id @default(cuid())
  name          String
  description   String?
  type          PathwayType
  tenantId      String
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  steps         PathwayStep[]
  enrollments   PathwayEnrollment[]

  @@unique([tenantId, type])
  @@index([tenantId])
  @@map("pathways")
}

model PathwayStep {
  id            String       @id @default(cuid())
  pathwayId     String
  name          String
  description   String?
  orderIndex    Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  pathway       Pathway      @relation(fields: [pathwayId], references: [id], onDelete: Cascade)
  progress      PathwayProgress[]

  @@unique([pathwayId, orderIndex])
  @@index([pathwayId])
  @@map("pathway_steps")
}

model PathwayEnrollment {
  id            String           @id @default(cuid())
  pathwayId     String
  userId        String
  status        EnrollmentStatus @default(ENROLLED)
  enrolledAt    DateTime         @default(now())
  completedAt   DateTime?
  droppedAt     DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  pathway       Pathway          @relation(fields: [pathwayId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pathwayId, userId])
  @@index([userId])
  @@index([pathwayId])
  @@index([status])
  @@map("pathway_enrollments")
}

model PathwayProgress {
  id            String       @id @default(cuid())
  stepId        String
  userId        String
  completedAt   DateTime     @default(now())
  completedBy   String?
  notes         String?

  step          PathwayStep  @relation(fields: [stepId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([stepId, userId])
  @@index([userId])
  @@index([stepId])
  @@map("pathway_progress")
}

enum AnnouncementScope {
  PUBLIC
  MEMBERS
  LEADERS
  ADMINS
}

enum AnnouncementPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model Announcement {
  id            String               @id @default(cuid())
  title         String
  content       String               @db.Text
  authorId      String
  localChurchId String
  scope         AnnouncementScope    @default(MEMBERS)
  priority      AnnouncementPriority @default(NORMAL)
  isActive      Boolean              @default(true)
  publishedAt   DateTime?
  expiresAt     DateTime?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  author        User                 @relation(fields: [authorId], references: [id])
  localChurch   LocalChurch          @relation(fields: [localChurchId], references: [id], onDelete: Cascade)

  @@index([localChurchId])
  @@index([authorId])
  @@index([publishedAt])
  @@index([scope])
  @@index([isActive, publishedAt])
  @@map("announcements")
}

model Message {
  id              String    @id @default(cuid())
  senderId        String
  recipientId     String
  subject         String?
  content         String    @db.Text
  isRead          Boolean   @default(false)
  readAt          DateTime?
  parentMessageId String?
  createdAt       DateTime  @default(now())

  sender          User      @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipient       User      @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
  parentMessage   Message?  @relation("MessageReplies", fields: [parentMessageId], references: [id], onDelete: Cascade)
  replies         Message[] @relation("MessageReplies")

  @@index([senderId])
  @@index([recipientId])
  @@index([recipientId, isRead])
  @@index([createdAt])
  @@index([parentMessageId])
  @@map("messages")
}

model FirstTimer {
  id              String   @id @default(cuid())
  memberId        String   @unique
  member          User     @relation("FirstTimerMember", fields: [memberId], references: [id], onDelete: Cascade)
  gospelShared    Boolean  @default(false)
  rootsCompleted  Boolean  @default(false)
  assignedVipId   String?
  assignedVip     User?    @relation("VipAssignments", fields: [assignedVipId], references: [id], onDelete: SetNull)
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([assignedVipId])
  @@index([gospelShared])
  @@index([rootsCompleted])
  @@map("first_timers")
}